 Helm is the package manager for Kubernetes

Three Big Concepts

A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster. Think of it like the Kubernetes equivalent of a Homebrew formula, an Apt dpkg, or a Yum RPM file.

A Repository is the place where charts can be collected and shared. It's like Perl's CPAN archive or the Fedora Package Database, but for Kubernetes packages.

A Release is an instance of a chart running in a Kubernetes cluster. One chart can often be installed many times into the same cluster. And each time it is installed, a new release is created. Consider a MySQL chart. If you want two databases running in your cluster, you can install that chart twice. Each one will have its own release, which will in turn have its own release name.

With these concepts in mind, we can now explain Helm like this:

Helm installs charts into Kubernetes, creating a new release for each installation. And to find new charts, you can search Helm chart repositories.


# add a repo
helm repo add [NAME] [URL] [flags]
NAME can be any name you choose (it doesn’t have to match the actual repository name).
example:
helm repo add bitnami https://charts.bitnami.com/bitnami

# List all added repo
helm repo list
example:
helm repo list
NAME    URL
bitnami https://charts.bitnami.com/bitnami

# search repo
helm search repo [keyword] [flags]
example:
helm search repo redis
NAME                    CHART VERSION   APP VERSION     DESCRIPTION
bitnami/redis           20.8.0          7.4.2           Redis(R) is an open source, advanced key-value ...
bitnami/redis-cluster   11.4.3          7.4.2           Redis(R) is an open source, scalable, distribut...
bitnami/keydb           0.4.0           6.3.4           KeyDB is a high performance fork of Redis with ...

# Get all versions of chart:
helm search repo [keyword] --versions
example:
helm search repo bitnami/redis --versions

# chart install
helm install [NAME] [CHART] [flags]          #  helm install --help for information
exmaple:
helm install redis bitnami/redis 
helm install redis bitnami/redis --version <version>

--version 20.8.0 → Specifies the chart version. not the app version , oneed to what app version map t chart version

> redis specific standalone deployment
helm install redis bitnami/redis --version 20.6.1 --set architecture=standalone --set master.persistence.enabled=false --set replica.persistence.enabled=false --namespace redis

upgrade to specifi version
helm upgrade redis bitnami/redis --version 20.8.0 --set architecture=standalone --set master.persistence.enabled=false --set replica.persistence.enabled=false --namespace redis


You can specify the '--values'/'-f' flag multiple times. The priority will be given to the
last (right-most) file specified. For example, if both myvalues.yaml and override.yaml
contained a key called 'Test', the value set in override.yaml would take precedence:

    $ helm install -f myvalues.yaml -f override.yaml  myredis ./redis


# helm status
helm status RELEASE_NAME [flags]
example:
helm status redis -n redis

# helm history
helm history RELEASE_NAME [flags]
example:
helm history redis -n redis
REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION
1               Mon Feb 24 08:26:57 2025        superseded      redis-20.6.1    7.4.1           Install complete
2               Mon Feb 24 08:30:04 2025        deployed        redis-20.8.0    7.4.2           Upgrade complete

# helm rollback
helm rollback <RELEASE> [REVISION] [flags]

helm rollback redis 1 -n redis

#check history now
helm history redis -n redis
REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION
1               Mon Feb 24 08:26:57 2025        superseded      redis-20.6.1    7.4.1           Install complete
2               Mon Feb 24 08:30:04 2025        superseded      redis-20.8.0    7.4.2           Upgrade complete
3               Tue Feb 25 04:24:18 2025        deployed        redis-20.6.1    7.4.1           Rollback to 1    <<<<<<<< rollback to 1


# helm get, retrieve information about named release
Usage:
  helm get [command] [RELEASE_NAME] [flags]

Available Commands:
  all         download all information for a named release
  hooks       download all hooks for a named release
  manifest    download the manifest for a named release
  notes       download the notes for a named release
  values      download the values file for a named release

example:
helm get values redis -n redis


# helm show, show information about Chart

Usage:
  helm show [command]

Aliases:
  show, inspect

Available Commands:
  all         show all information of the chart
  chart       show the chart's definition
  crds        show the chart's CRDs
  readme      show the chart's README
  values      show the chart's values
 
example: 
helm show values bitnami/redis


# helm lint
helm lint [PATH] [FLAGS]
# When you run helm lint [PATH], Helm performs static analysis on the chart in the harbor/ directory to check for issues. 
# The linting process ensures that the chart follows best practices and is structured correctly.

# helm template
Render chart templates locally and display the output.

Usage:
  helm template [NAME] [CHART] [flags]

helm template mysql bitnami/mysql 






# HELM CHART STRUCTURE
helm create hello-world
hello-world/
│── Chart.yaml
│── values.yaml
│── templates/
│   │── deployment.yaml
│   │── service.yaml
│   │── configmap.yaml
│   └── _helpers.tpl
│── charts/
│── .helmignore

1. charts/ Directory

    Purpose: Stores dependencies (other Helm charts).
    Contents: If you depend on another chart, it gets stored here when you run helm dependency update.
    Example:
        If your chart depends on Redis, it will be downloaded here.

2. templates/ Directory

    Purpose: Contains all Kubernetes manifests that Helm processes.
    Lexicographical Order: Helm processes files in this directory in alphabetical order.
    Files:
        deployment.yaml: Defines the Deployment resource.
        service.yaml: Defines the Service resource.
        configmap.yaml: Stores non-sensitive configuration.
        _helpers.tpl: Contains reusable template functions (like labels, name formatting).

Order of Execution (Example) Since Helm processes lexicographically:

    _helpers.tpl (first but doesn’t create a resource, just defines functions)
    configmap.yaml (ConfigMaps first because Deployments might use them)
    deployment.yaml
    service.yaml

You can control execution using hooks, but otherwise, Helm follows alphabetical order.
3. values.yaml

    Purpose: Defines default values for templates.
    Used in templates:
        {{ .Values.deployment.replicas }} pulls from values.yaml.

4. Chart.yaml

    Purpose: Metadata about the Helm chart (name, version, dependencies).